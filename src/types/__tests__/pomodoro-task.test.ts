import { describe, it, expect } from 'vitest'
import { 
  PomodoroTask, 
  ScheduledSlot, 
  PomodoroSubtask,
  TypeGuards,
  DefaultValues,
  SchedulingError
} from '../index'

describe('PomodoroTask Types', () => {
  const mockPomodoroTask: PomodoroTask = {
    // 基礎Todo屬性
    id: 'task-001',
    text: '產品設計任務',
    completed: false,
    createdAt: new Date('2024-01-28'),
    userId: 'user-123',
    priority: 'high',
    dueDate: new Date('2024-01-31'),
    
    // 番茄鐘特定屬性
    estimatedPomodoros: 10,
    completedPomodoros: 0,
    isAutoScheduled: true,
    scheduledSlots: [],
    subtasks: [],
    isSubdivided: false
  }

  it('should create valid PomodoroTask object', () => {
    expect(mockPomodoroTask.id).toBe('task-001')
    expect(mockPomodoroTask.estimatedPomodoros).toBe(10)
    expect(mockPomodoroTask.completedPomodoros).toBe(0)
    expect(mockPomodoroTask.isAutoScheduled).toBe(true)
    expect(Array.isArray(mockPomodoroTask.scheduledSlots)).toBe(true)
    expect(Array.isArray(mockPomodoroTask.subtasks)).toBe(true)
  })

  it('should validate PomodoroTask with type guard', () => {
    expect(TypeGuards.isPomodoroTask(mockPomodoroTask)).toBe(true)
    expect(TypeGuards.isPomodoroTask({})).toBe(false)
    expect(TypeGuards.isPomodoroTask(null)).toBe(false)
  })

  it('should handle task progression correctly', () => {
    const progressTask = { ...mockPomodoroTask }
    
    // 模擬完成3個番茄鐘
    progressTask.completedPomodoros = 3
    
    expect(progressTask.completedPomodoros).toBe(3)
    expect(progressTask.estimatedPomodoros - progressTask.completedPomodoros).toBe(7)
    
    // 計算完成百分比
    const completionRate = (progressTask.completedPomodoros / progressTask.estimatedPomodoros) * 100
    expect(completionRate).toBe(30)
  })
})

describe('ScheduledSlot Types', () => {
  const mockScheduledSlot: ScheduledSlot = {
    id: 'slot-001',
    taskId: 'task-001',
    userId: 'user-123',
    date: new Date('2024-01-29'),
    startTime: '09:00',
    endTime: '11:05', // 25min * 5 pomodoros + 4 * 5min breaks
    pomodoroCount: 5,
    status: 'scheduled',
    completedPomodoros: 0,
    isFlexible: true,
    priority: 'high',
    autoGenerated: true,
    createdAt: new Date(),
    updatedAt: new Date()
  }

  it('should create valid ScheduledSlot object', () => {
    expect(TypeGuards.isScheduledSlot(mockScheduledSlot)).toBe(true)
    expect(mockScheduledSlot.pomodoroCount).toBe(5)
    expect(mockScheduledSlot.status).toBe('scheduled')
  })

  it('should calculate time duration correctly', () => {
    const startTime = mockScheduledSlot.startTime // '09:00'
    const endTime = mockScheduledSlot.endTime     // '11:05'
    const pomodoroCount = mockScheduledSlot.pomodoroCount // 5
    
    // 驗證時間計算邏輯
    const expectedDuration = pomodoroCount * 25 + (pomodoroCount - 1) * 5 // 25min工作 + 5min休息
    expect(expectedDuration).toBe(145) // 5 * 25 + 4 * 5 = 125 + 20 = 145分鐘
  })

  it('should handle slot status transitions', () => {
    const slot = { ...mockScheduledSlot }
    
    // 狀態轉換測試
    slot.status = 'in_progress'
    slot.actualStartTime = new Date()
    expect(slot.status).toBe('in_progress')
    
    slot.status = 'completed'
    slot.completedPomodoros = slot.pomodoroCount
    slot.actualEndTime = new Date()
    expect(slot.completedPomodoros).toBe(slot.pomodoroCount)
  })
})

describe('PomodoroSubtask Types', () => {
  const mockSubtask: PomodoroSubtask = {
    id: 'subtask-001',
    parentTaskId: 'task-001',
    name: '需求分析與研究',
    description: '分析用戶需求和市場調研',
    estimatedPomodoros: 3,
    completedPomodoros: 0,
    scheduledSlots: [],
    priority: 'high',
    status: 'pending',
    progress: 0,
    order: 1,
    dependencies: [],
    createdAt: new Date(),
    updatedAt: new Date()
  }

  it('should create valid PomodoroSubtask object', () => {
    expect(mockSubtask.parentTaskId).toBe('task-001')
    expect(mockSubtask.estimatedPomodoros).toBe(3)
    expect(mockSubtask.order).toBe(1)
    expect(Array.isArray(mockSubtask.dependencies)).toBe(true)
  })

  it('should calculate progress correctly', () => {
    const subtask = { ...mockSubtask }
    
    // 完成1個番茄鐘
    subtask.completedPomodoros = 1
    subtask.progress = (subtask.completedPomodoros / subtask.estimatedPomodoros) * 100
    
    expect(subtask.progress).toBeCloseTo(33.33, 1)
  })
})

describe('DefaultValues Constants', () => {
  it('should provide correct default values', () => {
    expect(DefaultValues.DAILY_CAPACITY).toBe(12)
    expect(DefaultValues.POMODORO_DURATION).toBe(25)
    expect(DefaultValues.SHORT_BREAK_DURATION).toBe(5)
    expect(DefaultValues.LONG_BREAK_DURATION).toBe(15)
    expect(DefaultValues.SESSIONS_UNTIL_LONG_BREAK).toBe(4)
    expect(DefaultValues.DISTRIBUTION_STRATEGY).toBe('even')
  })

  it('should have valid working hours', () => {
    expect(DefaultValues.WORKING_HOURS.start).toBe('09:00')
    expect(DefaultValues.WORKING_HOURS.end).toBe('18:00')
    expect(DefaultValues.WORKING_HOURS.timezone).toBe('Asia/Taipei')
  })

  it('should have proper optimization weights', () => {
    const weights = DefaultValues.OPTIMIZATION_WEIGHTS
    const totalWeight = weights.completionTime + weights.workloadBalance + 
                       weights.userPreference + weights.riskMinimization
    
    expect(totalWeight).toBe(1.0) // 權重總和應為1
  })
})

describe('Error Types', () => {
  it('should create SchedulingError correctly', () => {
    const error = new SchedulingError('排程失敗', 'SCHEDULING_001', { taskId: 'task-001' })
    
    expect(error.name).toBe('SchedulingError')
    expect(error.message).toBe('排程失敗')
    expect(error.code).toBe('SCHEDULING_001')
    expect(error.details?.taskId).toBe('task-001')
  })
})

describe('Time Calculation Utilities', () => {
  it('should calculate pomodoro session duration', () => {
    const calculateSessionDuration = (pomodoroCount: number): number => {
      const workMinutes = pomodoroCount * DefaultValues.POMODORO_DURATION
      const shortBreaks = Math.max(0, pomodoroCount - 1)
      const shortBreakMinutes = shortBreaks * DefaultValues.SHORT_BREAK_DURATION
      
      return workMinutes + shortBreakMinutes
    }

    expect(calculateSessionDuration(1)).toBe(25)  // 1番茄鐘 = 25分鐘
    expect(calculateSessionDuration(2)).toBe(55)  // 2番茄鐘 = 25*2 + 5 = 55分鐘
    expect(calculateSessionDuration(4)).toBe(115) // 4番茄鐘 = 25*4 + 5*3 = 115分鐘
  })

  it('should calculate daily capacity utilization', () => {
    const calculateUtilization = (used: number, total: number): number => {
      return (used / total) * 100
    }

    expect(calculateUtilization(6, 12)).toBe(50)   // 50%利用率
    expect(calculateUtilization(12, 12)).toBe(100) // 100%利用率
    expect(calculateUtilization(0, 12)).toBe(0)    // 0%利用率
  })
})

describe('Integration with Existing Types', () => {
  it('should extend Todo interface correctly', () => {
    const basicTodo = {
      id: 'todo-001',
      text: '基礎任務',
      completed: false,
      createdAt: new Date()
    }

    const pomodoroTask: PomodoroTask = {
      ...basicTodo,
      estimatedPomodoros: 5,
      completedPomodoros: 0,
      isAutoScheduled: false,
      scheduledSlots: [],
      subtasks: [],
      isSubdivided: false
    }

    // 驗證基礎Todo屬性仍然存在
    expect(pomodoroTask.id).toBe('todo-001')
    expect(pomodoroTask.text).toBe('基礎任務')
    expect(pomodoroTask.completed).toBe(false)
    
    // 驗證新增屬性
    expect(pomodoroTask.estimatedPomodoros).toBe(5)
    expect(pomodoroTask.isAutoScheduled).toBe(false)
  })
})