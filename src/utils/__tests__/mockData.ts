/**
 * 模擬數據工廠
 * 用於測試和演示智慧番茄鐘排程功能
 */

import type { 
  PomodoroTask, 
  ScheduledSlot, 
  PomodoroSubtask, 
  TaskComplexity,
  UserSchedulingPreferences,
  SchedulingConflict,
  ConflictResolution
} from '../../types/pomodoro-task'

import type {
  DailyCapacity,
  SchedulingResult
} from '../../types/scheduling'

export class MockDataFactory {
  
  /**
   * 創建模擬的番茄鐘任務
   */
  static createMockPomodoroTask(overrides: Partial<PomodoroTask> = {}): PomodoroTask {
    const baseTask: PomodoroTask = {
      // 基礎Todo屬性
      id: `task-${Date.now()}`,
      text: '產品設計任務',
      completed: false,
      createdAt: new Date(),
      userId: 'user-123',
      priority: 'high',
      dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3天後
      
      // 番茄鐘特定屬性
      estimatedPomodoros: 10,
      completedPomodoros: 0,
      isAutoScheduled: true,
      scheduledSlots: [],
      subtasks: [],
      isSubdivided: false,
      
      // 可選屬性
      lastScheduled: new Date(),
      schedulingStrategy: 'even'
    }

    return { ...baseTask, ...overrides }
  }

  /**
   * 創建模擬的排程時間段
   */
  static createMockScheduledSlot(overrides: Partial<ScheduledSlot> = {}): ScheduledSlot {
    const now = new Date()
    const baseSlot: ScheduledSlot = {
      id: `slot-${Date.now()}`,
      taskId: 'task-001',
      userId: 'user-123',
      date: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1),
      startTime: '09:00',
      endTime: '11:05',
      pomodoroCount: 5,
      status: 'scheduled',
      completedPomodoros: 0,
      isFlexible: true,
      priority: 'high',
      autoGenerated: true,
      createdAt: new Date(),
      updatedAt: new Date()
    }

    return { ...baseSlot, ...overrides }
  }

  /**
   * 創建模擬的子任務
   */
  static createMockSubtask(overrides: Partial<PomodoroSubtask> = {}): PomodoroSubtask {
    const baseSubtask: PomodoroSubtask = {
      id: `subtask-${Date.now()}`,
      parentTaskId: 'task-001',
      name: '需求分析與研究',
      description: '分析用戶需求和競品調研',
      estimatedPomodoros: 3,
      completedPomodoros: 0,
      scheduledSlots: [],
      priority: 'high',
      status: 'pending',
      progress: 0,
      order: 1,
      dependencies: [],
      createdAt: new Date(),
      updatedAt: new Date()
    }

    return { ...baseSubtask, ...overrides }
  }

  /**
   * 創建模擬的日容量
   */
  static createMockDailyCapacity(overrides: Partial<DailyCapacity> = {}): DailyCapacity {
    const today = new Date()
    const baseCapacity: DailyCapacity = {
      id: `capacity-${today.toDateString()}`,
      userId: 'user-123',
      date: today,
      totalPomodoros: 12,
      availablePomodoros: 8,
      usedPomodoros: 4,
      reservedPomodoros: 0,
      workingHours: {
        start: '09:00',
        end: '18:00',
        timezone: 'Asia/Taipei',
        breaks: [
          {
            id: 'lunch',
            start: '12:00',
            end: '13:00',
            type: 'lunch',
            isFlexible: true,
            description: '午餐時間'
          }
        ],
        peakHours: [
          {
            start: '09:00',
            end: '11:00',
            efficiency: 1.2,
            description: '上午高效時段'
          }
        ],
        allowEarlyStart: false,
        allowLateEnd: true,
        maxEarlyMinutes: 0,
        maxLateMinutes: 60
      },
      allowOvertime: true,
      maxOvertimePomodoros: 3,
      overtimeRate: 0.8,
      isFlexible: true,
      isHoliday: false,
      utilizationRate: 0.33,
      createdAt: new Date(),
      updatedAt: new Date()
    }

    return { ...baseCapacity, ...overrides }
  }

  /**
   * 創建用戶排程偏好
   */
  static createMockUserPreferences(overrides: Partial<UserSchedulingPreferences> = {}): UserSchedulingPreferences {
    const basePreferences: UserSchedulingPreferences = {
      userId: 'user-123',
      preferredDistributionStrategy: 'even',
      maxDailyPomodoros: 12,
      preferredWorkingHours: {
        start: '09:00',
        end: '18:00'
      },
      autoBreakdownThreshold: 5,
      preferredSubtaskSize: 3,
      allowOvertimeScheduling: true,
      flexibilityLevel: 'moderate',
      bufferTimePercentage: 10,
      reminderSettings: {
        beforeStart: 5,
        duringWork: true,
        afterCompletion: true
      },
      updatedAt: new Date()
    }

    return { ...basePreferences, ...overrides }
  }

  /**
   * 創建任務複雜度分析
   */
  static createMockTaskComplexity(overrides: Partial<TaskComplexity> = {}): TaskComplexity {
    const baseComplexity: TaskComplexity = {
      score: 0.7,
      factors: {
        estimatedTime: 0.8,
        dependencies: 0.3,
        skillRequirement: 0.9,
        uncertainty: 0.6
      },
      category: 'complex',
      suggestions: [
        '建議分解為3-4個子任務',
        '預留20%的緩衝時間',
        '考慮在高效時段執行'
      ]
    }

    return { ...baseComplexity, ...overrides }
  }

  /**
   * 創建完整的產品設計任務示例
   */
  static createProductDesignExample(): {
    task: PomodoroTask
    subtasks: PomodoroSubtask[]
    slots: ScheduledSlot[]
    capacity: DailyCapacity[]
  } {
    // 主任務
    const task = this.createMockPomodoroTask({
      text: '產品設計：智慧番茄鐘功能',
      estimatedPomodoros: 10,
      dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3天後
      isSubdivided: true
    })

    // 子任務
    const subtasks = [
      this.createMockSubtask({
        parentTaskId: task.id,
        name: '需求分析與研究',
        estimatedPomodoros: 2,
        order: 1
      }),
      this.createMockSubtask({
        parentTaskId: task.id,
        name: '概念設計與草圖',
        estimatedPomodoros: 3,
        order: 2,
        dependencies: ['subtask-1']
      }),
      this.createMockSubtask({
        parentTaskId: task.id,
        name: '詳細設計與原型',
        estimatedPomodoros: 4,
        order: 3,
        dependencies: ['subtask-2']
      }),
      this.createMockSubtask({
        parentTaskId: task.id,
        name: '設計驗證與調整',
        estimatedPomodoros: 1,
        order: 4,
        dependencies: ['subtask-3']
      })
    ]

    // 排程時間段
    const today = new Date()
    const slots = [
      // 第一天：4個番茄鐘
      this.createMockScheduledSlot({
        taskId: task.id,
        subtaskId: subtasks[0].id,
        date: new Date(today.getTime() + 24 * 60 * 60 * 1000),
        startTime: '09:00',
        endTime: '11:05',
        pomodoroCount: 4
      }),
      // 第二天：3個番茄鐘
      this.createMockScheduledSlot({
        taskId: task.id,
        subtaskId: subtasks[1].id,
        date: new Date(today.getTime() + 2 * 24 * 60 * 60 * 1000),
        startTime: '10:00',
        endTime: '11:40',
        pomodoroCount: 3
      }),
      // 第三天：3個番茄鐘
      this.createMockScheduledSlot({
        taskId: task.id,
        subtaskId: subtasks[2].id,
        date: new Date(today.getTime() + 3 * 24 * 60 * 60 * 1000),
        startTime: '09:00',
        endTime: '10:40',
        pomodoroCount: 3
      })
    ]

    // 每日容量
    const capacity = [1, 2, 3].map(dayOffset => 
      this.createMockDailyCapacity({
        date: new Date(today.getTime() + dayOffset * 24 * 60 * 60 * 1000),
        usedPomodoros: dayOffset === 1 ? 4 : 3,
        availablePomodoros: dayOffset === 1 ? 8 : 9
      })
    )

    return { task, subtasks, slots, capacity }
  }

  /**
   * 創建排程衝突示例
   */
  static createSchedulingConflictExample(): SchedulingConflict {
    const conflict: SchedulingConflict = {
      id: 'conflict-001',
      type: 'time_overlap',
      severity: 'high',
      conflictingSlots: [
        this.createMockScheduledSlot({
          id: 'slot-1',
          startTime: '09:00',
          endTime: '10:25'
        }),
        this.createMockScheduledSlot({
          id: 'slot-2',
          startTime: '10:00',
          endTime: '11:25'
        })
      ],
      affectedTasks: ['task-001', 'task-002'],
      description: '兩個任務的時間段發生重疊',
      suggestedResolutions: [
        {
          id: 'resolution-001',
          conflictId: 'conflict-001',
          type: 'reschedule',
          title: '重新排程第二個任務',
          description: '將第二個任務移至11:30開始',
          impact: {
            affectedSlots: 1,
            timeChange: 30,
            priorityChange: false
          },
          actions: [
            {
              type: 'move_slot',
              targetId: 'slot-2',
              parameters: { newStartTime: '11:30' },
              description: '移動時間段至11:30'
            }
          ],
          estimatedEffort: 5,
          confidence: 0.9,
          isSelected: false
        }
      ],
      autoResolvable: true,
      detectedAt: new Date()
    }

    return conflict
  }

  /**
   * 創建測試用的排程結果
   */
  static createMockSchedulingResult(): SchedulingResult {
    const example = this.createProductDesignExample()
    
    const result: SchedulingResult = {
      success: true,
      message: '✅ 任務已成功排程至3天內完成',
      scheduledSlots: example.slots,
      suggestedSubtasks: example.subtasks,
      strategy: {
        type: 'even',
        name: '均勻分配策略',
        description: '將任務平均分配到可用時間',
        parameters: {
          frontLoadRatio: 0,
          backLoadRatio: 0,
          concentrationDays: 0,
          preferMorning: true,
          preferAfternoon: false,
          preferEvening: false,
          bufferPercentage: 10,
          allowSplitting: true,
          minSlotSize: 1,
          maxSlotSize: 6
        },
        conditions: {
          minTaskSize: 1,
          maxTaskSize: 20,
          availableDays: 7,
          userExperience: 'intermediate',
          taskType: ['design', 'analysis', 'implementation']
        },
        expectedOutcomes: {
          estimatedCompletionRate: 0.85,
          stressLevel: 'medium',
          flexibility: 'high',
          riskLevel: 'low',
          suitability: 0.8
        }
      },
      complexity: this.createMockTaskComplexity(),
      estimatedCompletionDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
      confidence: 0.85,
      feasibility: 0.9,
      riskAssessment: {
        overall: 'low',
        factors: [
          {
            type: 'tight_deadline',
            severity: 'low',
            probability: 0.2,
            impact: '可能需要輕微調整時程',
            description: '截止日期相對寬鬆'
          }
        ],
        mitigation: [
          '保持彈性排程',
          '定期檢查進度'
        ]
      },
      alternatives: [],
      generatedAt: new Date(),
      generatedBy: 'system'
    }

    return result
  }

  /**
   * 創建批量任務測試數據
   */
  static createBatchTasksExample(): PomodoroTask[] {
    return [
      this.createMockPomodoroTask({
        text: 'UI設計系統建立',
        estimatedPomodoros: 8,
        priority: 'high'
      }),
      this.createMockPomodoroTask({
        text: 'API介面設計',
        estimatedPomodoros: 6,
        priority: 'medium'
      }),
      this.createMockPomodoroTask({
        text: '數據庫設計',
        estimatedPomodoros: 4,
        priority: 'high'
      }),
      this.createMockPomodoroTask({
        text: '測試計畫撰寫',
        estimatedPomodoros: 3,
        priority: 'low'
      })
    ]
  }
}

/**
 * 驗證工具類
 * 提供各種驗證函數
 */
export class ValidationUtils {
  
  /**
   * 驗證番茄鐘任務數據完整性
   */
  static validatePomodoroTask(task: PomodoroTask): { valid: boolean; errors: string[] } {
    const errors: string[] = []

    if (!task.id || typeof task.id !== 'string') {
      errors.push('任務ID必須是非空字符串')
    }

    if (!task.text || typeof task.text !== 'string') {
      errors.push('任務描述必須是非空字符串')
    }

    if (typeof task.estimatedPomodoros !== 'number' || task.estimatedPomodoros < 1) {
      errors.push('預估番茄鐘數量必須是大於0的數字')
    }

    if (typeof task.completedPomodoros !== 'number' || task.completedPomodoros < 0) {
      errors.push('已完成番茄鐘數量必須是非負數字')
    }

    if (task.completedPomodoros > task.estimatedPomodoros) {
      errors.push('已完成數量不能超過預估數量')
    }

    if (!Array.isArray(task.scheduledSlots)) {
      errors.push('排程時間段必須是數組')
    }

    if (!Array.isArray(task.subtasks)) {
      errors.push('子任務必須是數組')
    }

    return {
      valid: errors.length === 0,
      errors
    }
  }

  /**
   * 驗證時間段邏輯
   */
  static validateScheduledSlot(slot: ScheduledSlot): { valid: boolean; errors: string[] } {
    const errors: string[] = []

    if (slot.pomodoroCount <= 0) {
      errors.push('番茄鐘數量必須大於0')
    }

    if (slot.completedPomodoros > slot.pomodoroCount) {
      errors.push('已完成數量不能超過計劃數量')
    }

    // 驗證時間格式
    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/
    if (!timeRegex.test(slot.startTime)) {
      errors.push('開始時間格式不正確')
    }

    if (!timeRegex.test(slot.endTime)) {
      errors.push('結束時間格式不正確')
    }

    return {
      valid: errors.length === 0,
      errors
    }
  }

  /**
   * 驗證日容量邏輯
   */
  static validateDailyCapacity(capacity: DailyCapacity): { valid: boolean; errors: string[] } {
    const errors: string[] = []

    if (capacity.totalPomodoros <= 0) {
      errors.push('總容量必須大於0')
    }

    if (capacity.usedPomodoros < 0) {
      errors.push('已使用容量不能為負數')
    }

    if (capacity.availablePomodoros < 0) {
      errors.push('可用容量不能為負數')
    }

    if (capacity.usedPomodoros + capacity.availablePomodoros > capacity.totalPomodoros) {
      errors.push('已使用容量 + 可用容量不能超過總容量')
    }

    return {
      valid: errors.length === 0,
      errors
    }
  }
}